import_ffi utf8 as type;

type Tag = enum u8 {
    End = 0,
    Byte,
    Short,
    Int,
    Long,
    Float,
    Double,
    ByteArray,
    String,
    List,
    Compound,
    IntArray,
    LongArray,
};

type NBTString = container {
    len: u16 = len(value) :> u16,
    value: utf8(len),
};

type IntArray = container {
    len: i32 = len(value) :> i32,
    value: i32[len],
};

type LongArray = container {
    len: i32 = len(value) :> i32
    value: i64[len],
};

type Payload(t: Tag) = container +tagged_enum {
    Byte: i8 {t == Tag::Byte},
    Short: i16 {t == Tag::Short},
    Int: i32 {t == Tag::Int},
    Long: i64 {t == Tag::Long},
    Float: f32 {t == Tag::Float},
    Double: f64 {t == Tag::Double},
    String: NBTString {t == Tag::String},
    List: List {t == Tag::List},
    Compound: Compound {t == Tag::Compound},
    IntArray: IntArray {t == Tag::IntArray},
    LongArray: LongArray {t == Tag::LongArray},
};

type CompoundItem = container {
    type_id: Tag,
    name_len: u16 = len(name) :> u16,
    name: utf8(name_len),
    payload: Payload(type_id),
};

type Compound = container {
    items: CompoundItem[.."\0"]
};

type List = container {
    type_id: Tag,
    length: i32 = len(items) :> length,
    items: Payload(type_id)[length],
};